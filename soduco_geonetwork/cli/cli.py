"""CLI module to call delete function from dataset module
"""

import csv
import os
import tempfile
from pathlib import Path
import click
from soduco_geonetwork.api_wrapper import (
    config,
    dataset,
    geonetwork,
    helpers,
    yaml_to_xml,
)


def check_for_environment_variables():
    must_be_defined = [
        "GEONETWORK",
        "API_PATH",
        "GEONETWORK_USER",
        "GEONETWORK_PASSWORD",
    ]

    vars = [v for v in must_be_defined if not config.config.get(v)]
    if vars:
        raise AssertionError(f"Missing expected ENV variables {', '.join(vars)}")


@click.group()
def cli():
    """Main function"""
    check_for_environment_variables()


@cli.command()
@click.argument("input_yaml_file", type=click.Path(exists=True))
@click.option("--output_folder")
def parse(input_yaml_file, output_folder):
    """Generate xml files from a yaml documents


    Needs 1 argument:
    - A yaml file with one or more documents to parse to xml (dumped in tmp folder by default)
    """
    if not input_yaml_file.endswith((".yml", ".yaml")):
        raise ValueError("Not a yaml file")

    if output_folder is None:
        output_folder = tempfile.mkdtemp()
        click.echo("folder " + output_folder + " created. Parsing YAML file.")
    else:
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
            click.echo("folder " + output_folder + " created. Parsing YAML file.")
        else:
            click.echo("folder " + output_folder + " already present. Parsing YAML file.")

    yaml_to_xml.parse(input_yaml_file, output_folder)

    click.echo("yaml_list dumped in current folder : " + os.getcwd())


# For now it creates a temp file with UUID returned from the upload to Geonetwork
# Then update the csv given as argument
# TO DO : work only in csv given as argument
@cli.command()
@click.argument("csv_file", type=click.Path(exists=True))
def upload(csv_file):
    """Upload one or more xml files from a csv file


    Needs 1 arguments:
    - A csv file with the path of the xml files to upload
    """
    session = geonetwork.log_in(
        config.config["GEONETWORK_USER"], config.config["GEONETWORK_PASSWORD"]
    )

    file = open(csv_file, "r", encoding="utf8")
    reader = csv.DictReader(file)
    parent = Path(csv_file).parent.absolute()
    temp_file = parent / "temp.csv"
    rows_to_dump = []

    for row in reader:
        # xml_file = helpers.xml_to_utf8string((helpers.read_xml_file(f"{dirname}/{row['xml_file']}")))
        xml_file = helpers.read_xml_file(parent / row["xml_file_path"])
        json_response = dataset.upload(xml_file, session).json()
        geonetwork_uuid = helpers.get_geonetwork_uuid(json_response)
        row["geonetwork_uuid"] = geonetwork_uuid
        rows_to_dump.append(row)

        click.echo(json_response)

    helpers.dump_uploaded_uuid(rows_to_dump, temp_file)
    helpers.replace_uuid(temp_file, csv_file)


@cli.command()
@click.argument("input_csv_file", type=click.Path(exists=True))
@click.argument("edition_location", type=str)
@click.argument("xml_patch", type=str)
def update(input_csv_file, edition_location, xml_patch):
    """Update a xml dataset on geonetwork


    Needs 3 arguments:
    - A csv file with a column "geonetwork_uuid" with uuids to update
    - An edition location in the document (in Xpath)
    - A xml element to save at the location (it will erase any previous element)
    """
    session = geonetwork.log_in(
        config.config["GEONETWORK_USER"], config.config["GEONETWORK_PASSWORD"]
    )

    uuid_list = helpers.uuid_list_from_csv(input_csv_file)

    response = dataset.update(uuid_list, edition_location, xml_patch, session)
    click.echo(response)


@cli.command()
@click.argument("csv_postponed_values", type=click.Path(exists=True))
@click.argument("temp_csv_postponed_values", type=click.Path(exists=True))
def update_postponed_values(csv_postponed_values, temp_csv_postponed_values):
    """Edit the postponed links between uploaded records


    Needs 1 argument: a csv file with postponed values (one is generated by the parse command)
    """
    session = geonetwork.log_in(
        config.config["GEONETWORK_USER"], config.config["GEONETWORK_PASSWORD"]
    )

    postponed_list = helpers.read_postponed_values(csv_postponed_values)
    if temp_csv_postponed_values:
        prior_postponed_list = helpers.read_postponed_values(temp_csv_postponed_values)

    for index, item in enumerate(postponed_list):
        if temp_csv_postponed_values:
            prior_item = prior_postponed_list[index]
            response = dataset.edit_postponed_values(item, prior_item, session)
            click.echo(response)

@cli.command()
@click.argument("input_csv_file", type=click.Path(exists=True))
def delete(input_csv_file):
    """Delete one or more dataset on geonetwork from a csv file


    Needs 1 argument:
    - A csv file with a column "geonetwork_uuid" with uuids to delete
    """

    session = geonetwork.log_in(
        config.config["GEONETWORK_USER"], config.config["GEONETWORK_PASSWORD"]
    )

    uuid_list = helpers.uuid_list_from_csv(input_csv_file)

    chunk_size = 100

    for i in range(0, len(uuid_list), chunk_size):
        response = dataset.delete(uuid_list[i:i+chunk_size], session).json()
        click.echo(response)


if __name__ == "__main__":
    cli()
